using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Final.Models;
using Microsoft.AspNetCore.Authorization;
using Final.Areas.Identity.Data;

namespace Final.Controllers
{
    [Authorize(Roles = "Tutor")]
    public class ScheduleController : Controller
    {
        private readonly LumosTutorIdentityDbContext _context;
        private string Layout = "TutorLayout";

        public ScheduleController(LumosTutorIdentityDbContext context)
        {
            _context = context;
        }

        // GET: Schedule
        public async Task<IActionResult> Index()
        {
            ViewBag.Layout = Layout;
            // Assuming you have a Schedule model
            return View(await _context.Schedule.ToListAsync());
        }

        // GET: Schedule/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            ViewBag.Layout = Layout;
            if (id == null || _context.Schedule == null)
            {
                return NotFound();
            }

            var schedule = await _context.Schedule
                .FirstOrDefaultAsync(m => m.Id == id);
            if (schedule == null)
            {
                return NotFound();
            }

            return View(schedule);
        }

        // GET: Schedule/Create
        public IActionResult Create()
        {
            ViewBag.Layout = Layout;
            return View();
        }

        // POST: Schedule/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,DayOfWeek,StartTime,EndTime")] Schedule schedule)
        {
            ViewBag.Layout = Layout;
            // Set TutorId based on the currently logged-in tutor
            schedule.TutorId = GetLoggedInTutorId();

            if (ModelState.IsValid)
            {
                _context.Add(schedule);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(schedule);
        }

        // GET: Schedule/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            ViewBag.Layout = Layout;
            if (id == null || _context.Schedule == null)
            {
                return NotFound();
            }

            var schedule = await _context.Schedule.FindAsync(id);
            if (schedule == null)
            {
                return NotFound();
            }

            return View(schedule);
        }

        // POST: Schedule/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,DayOfWeek,StartTime,EndTime")] Schedule schedule)
        {
            ViewBag.Layout = Layout;
            if (id != schedule.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(schedule);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ScheduleExists(schedule.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(schedule);
        }

        // GET: Schedule/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            ViewBag.Layout = Layout;
            if (id == null || _context.Schedule == null)
            {
                return NotFound();
            }

            var schedule = await _context.Schedule
                .FirstOrDefaultAsync(m => m.Id == id);
            if (schedule == null)
            {
                return NotFound();
            }

            return View(schedule);
        }

        // POST: Schedule/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            ViewBag.Layout = Layout;
            if (_context.Schedule == null)
            {
                return Problem("Entity set 'FinalIdentityDbContext.Schedule' is null.");
            }

            var schedule = await _context.Schedule.FindAsync(id);
            if (schedule != null)
            {
                _context.Schedule.Remove(schedule);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ScheduleExists(int id)
        {
            ViewBag.Layout = Layout;
            return (_context.Schedule?.Any(e => e.Id == id)).GetValueOrDefault();
        }

        private int GetLoggedInTutorId()
        {
            // Implement logic to get the currently logged-in tutor's Id
            // This could involve querying the database or using information from the authentication system
            // For simplicity, you might want to adapt this based on your authentication and authorization setup
            // Replace this with your actual logic to obtain the TutorId.
            return 1; // Placeholder value; replace with your implementation.
        }
    }
}
