using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Final.Models; 
using Final.Areas.Identity.Data;
using Final.Utils;

namespace Final.Controllers
{
    public class BookingController : Controller
    {
        private readonly UserManager<LumosTutorUser> _userManager;
        private readonly LumosTutorIdentityDbContext _context;
        private readonly IWebHostEnvironment hostEnvironment;

        public BookingController(LumosTutorIdentityDbContext context, UserManager<LumosTutorUser> userManager, IWebHostEnvironment environment)
        {
            _context = context;
            _userManager = userManager;
            hostEnvironment = environment;
        }

        [Authorize(Roles = "Student")]
        public async Task<IActionResult> Index()
        {
            var userID = _userManager.GetUserId(HttpContext.User);
            LumosTutorUser user = _userManager.FindByIdAsync(userID).Result;
            
            ViewBag.Layout = "_MainLayout";  

            var bookings = await _context.Booking
                .Include(b => b.Tutor)
                .Where(b => b.StudentId == user.Id)
                .ToListAsync();

            return View(bookings);
        }

        [Authorize(Roles = "Tutor")]
        public async Task<IActionResult> TutorBookings()
        {
            var userID = _userManager.GetUserId(HttpContext.User);
            LumosTutorUser user = _userManager.FindByIdAsync(userID).Result;

            ViewBag.Layout = "TutorLayout";  

            var bookings = await _context.Booking
                .Include(b => b.Student)
                .Where(b => b.TutorId == user.Id)
                .ToListAsync();

            return View(bookings);
        }

        [Authorize(Roles = "Student")]
        public IActionResult BookTutor(int tutorId, DateTime scheduleDate)
        {

            var userID = _userManager.GetUserId(HttpContext.User);
            var booking = new Booking
            {
                StudentId = userID,
                TutorId = tutorId,
                ScheduleDate = scheduleDate,
            };

            _context.Booking.Add(booking);
            _context.SaveChanges();

            // Redirect to the bookings page
            return RedirectToAction("Index");
        }

        [Authorize(Roles = "Tutor")]
        public async Task<IActionResult> ManageSchedules()
        {
            var userID = _userManager.GetUserId(HttpContext.User);
            LumosTutorUser user = _userManager.FindByIdAsync(userID).Result;
            ViewBag.Layout = "TutorLayout"; 
            var schedules = await _context.Schedule
            .Where(s => s.TutorId == user.Id)
            .ToListAsync();

            return View(schedules);
        }

    
    

[Authorize(Roles = "Tutor")]
public async Task<IActionResult> TutorProfile()
{
    var userID = _userManager.GetUserId(HttpContext.User);
    LumosTutorUser user = _userManager.FindByIdAsync(userID).Result;

    ViewBag.Layout = "TutorLayout";  // Assuming a different layout for tutors

    var tutor = await _context.Tutor
        .Where(t => t.Id == user.Id)
        .FirstOrDefaultAsync();

    return View(tutor);
}

[Authorize(Roles = "Tutor")]
public IActionResult EditTutorProfile()
{
    var userID = _userManager.GetUserId(HttpContext.User);
    LumosTutorUser user = _userManager.FindByIdAsync(userID).Result;

    ViewBag.Layout = "TutorLayout";  // Assuming a different layout for tutors

    var tutor = _context.Tutor
        .Where(t => t.Id == user.Id)
        .FirstOrDefault();

    return View(tutor);
}

[HttpPost]
[ValidateAntiForgeryToken]
[Authorize(Roles = "Tutor")]
public async Task<IActionResult> EditTutorProfile(Tutor tutor)
{
    if (ModelState.IsValid)
    {
        _context.Tutor.Update(tutor);
        await _context.SaveChangesAsync();

        return RedirectToAction("TutorProfile");
    }

    // If the model state is not valid, return to the edit view with validation errors
    return View(tutor);
}

    }
}
